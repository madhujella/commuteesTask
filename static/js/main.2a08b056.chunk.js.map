{"version":3,"sources":["store/actionCreators.js","store/actionTypes.js","utils/constants.js","components/DocTitle/DocTitle.js","components/FormatOptions/FormatOptions.js","components/EditorInput/SelectorBtnsList/SelectorBtnsList.js","components/EditorInput/UpdateBtnsList/UpdateBtnsList.js","components/EditorInput/EditorInput.js","App.js","serviceWorker.js","store/store.js","index.js"],"names":["addElement","data","type","ELEMENT_TYPES","FORMAT_TYPES","BOLD","UNDERLINE","ITALIC","LINK","DocTitle","useState","titleText","setTitleText","dispatch","useDispatch","lastSelectedBtn","useSelector","title","className","value","onChange","target","onKeyDown","key","canEdit","isNew","listType","classList","FORMAT_BUTTONS","text","FormatOptions","id","optionList","map","i","onClick","ELEMENT_BTN_TYPES","SelectorList","UpdateElementBtns","EditorInput","getSelected","listTypeInd","setText","openFormatPP","setOpenFormatPP","listNo","useEffect","join","UpdateBtnsList","autoFocus","onMouseOut","onSelect","addElementText","createElement","href","SelectorBtnsList","App","elementsList","elements","state","docTitle","getSelectedElement","console","log","list","listCnt","lastListType","s","forEach","e","push","renderElements","Boolean","window","location","hostname","match","initialState","store","configureStore","reducer","action","filter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a08b056.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\nexport const lastSelectedBtn = (data) => ({ type: actionTypes.LAST_SELECTED_BTN, data })\r\n\r\nexport const addTitle = (data) => ({ type: actionTypes.ADD_TITLE, data })\r\n\r\nexport const addElement = (data) => ({ type: actionTypes.ADD_ELEMENT, data })\r\nexport const addElementText = (id, data) => ({ type: actionTypes.ADD_ELEMENT_TEXT, id, data })\r\nexport const updateElementEdit = (data) => ({ type: actionTypes.UPDATE_ELEMENT_EDIT, data })\r\nexport const removeElement = (data) => ({ type: actionTypes.REMOVE_ELEMENT, data })\r\nexport const reorderElement = (data) => ({ type: actionTypes.REORDER_ELEMENT, data })\r\n\r\nexport const formatElement = data => ({ type: actionTypes.FORMAT_ELEMENT, data })","export const LAST_SELECTED_BTN = 'LAST_SELECTED_BTN'\r\n\r\nexport const ADD_TITLE = 'ADD_TITLE'\r\nexport const UPDATE_ELEMENT_EDIT = 'UPDATE_ELEMENT_EDIT'\r\n\r\nexport const ADD_ELEMENT_TEXT = 'ADD_ELEMENT_TEXT'\r\nexport const ADD_ELEMENT = 'ADD_ELEMENT'\r\nexport const REMOVE_ELEMENT = 'REMOVE_ELEMENT'\r\nexport const REORDER_ELEMENT = 'REORDER_ELEMENT'\r\n\r\nexport const FORMAT_ELEMENT = 'FORMAT_ELEMENT'","export const ELEMENT_TYPES = {\r\n    DEFAULT: 'div',\r\n    H1: 'h1',\r\n    H2: 'h2',\r\n    UL: 'ul',\r\n    OL: 'ol',\r\n    A: 'a',\r\n    LI: 'li',\r\n}\r\n\r\nexport const FORMAT_TYPES = {\r\n    BOLD: 'BOLD',\r\n    UNDERLINE: 'UNDERLINE',\r\n    ITALIC: 'ITALIC',\r\n    LINK: 'LINK'\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addElement, addTitle } from '../../store/actionCreators';\r\nimport { ELEMENT_TYPES } from '../../utils/constants';\r\n\r\n\r\nconst DocTitle = () => {\r\n\r\n    const [titleText, setTitleText] = useState('')\r\n    const dispatch = useDispatch()\r\n    const lastSelectedBtn = useSelector(({ lastSelectedBtn }) => lastSelectedBtn)\r\n\r\n    const title = useSelector(({ title }) => title)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                title\r\n                    ? <div className=\"title bold\">{title}</div>\r\n                    : <input className=\"title-input\" type='text' value={titleText} onChange={({ target }) => setTitleText(target.value)}\r\n                        onKeyDown={({ key }) => {\r\n                            if (key === 'Enter') {\r\n                                dispatch(addElement({\r\n                                    type: lastSelectedBtn,\r\n                                    value: '',\r\n                                    canEdit: true,\r\n                                    isNew: true,\r\n                                    listType: lastSelectedBtn === ELEMENT_TYPES.OL || lastSelectedBtn === ELEMENT_TYPES.UL ? lastSelectedBtn : null,\r\n                                    classList: []\r\n                                }))\r\n                                dispatch(addTitle(titleText))\r\n                            }\r\n                        }} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DocTitle;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { formatElement } from '../../store/actionCreators';\r\nimport { FORMAT_TYPES } from '../../utils/constants';\r\n\r\nconst FORMAT_BUTTONS = [\r\n    { type: FORMAT_TYPES.BOLD, text: 'B', className: 'format-bold' },\r\n    { type: FORMAT_TYPES.ITALIC, text: 'I', className: 'format-italic' },\r\n    { type: FORMAT_TYPES.UNDERLINE, text: 'U', className: 'format-underline' },\r\n]\r\n\r\nconst FormatOptions = ({ id, optionList }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onClick = (type) => {\r\n        for (const key in FORMAT_TYPES)\r\n            if (FORMAT_TYPES[key] === type) dispatch(formatElement({ id, type, value: !optionList[type] }))\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"format-options\">\r\n            {\r\n                FORMAT_BUTTONS.map(({ className, text, type }, i) =>\r\n                    <button key={`format-${i}`} onClick={() => onClick(type)} className={`${className} ${optionList[type]}`}>{text}</button>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormatOptions;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ELEMENT_TYPES } from '../../../utils/constants';\r\nimport { lastSelectedBtn as lastSelectedBtnAction } from '../../../store/actionCreators';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst ELEMENT_BTN_TYPES = [\r\n    { className: 'add-h1', type: ELEMENT_TYPES.H1, text: 'H1' },\r\n    { className: 'add-h2', type: ELEMENT_TYPES.H2, text: 'H2' },\r\n    { className: 'add-ul', type: ELEMENT_TYPES.UL, text: 'UL' },\r\n    { className: 'add-ol', type: ELEMENT_TYPES.OL, text: 'OL' },\r\n    { className: 'add-link', type: ELEMENT_TYPES.A, text: 'A' },\r\n    { className: 'add-default', type: ELEMENT_TYPES.DEFAULT, text: 'Default' },\r\n]\r\n\r\nconst SelectorList = () => {\r\n    const dispatch = useDispatch()\r\n    const lastSelectedBtn = useSelector(({ lastSelectedBtn }) => lastSelectedBtn)\r\n    return (\r\n        <>\r\n            {\r\n                ELEMENT_BTN_TYPES.map(({ className, text, type }, i) =>\r\n                    <button className={`${className} ${lastSelectedBtn === type ? 'active' : ''}`} key={`selectors-${i}`}\r\n                        onClick={() => dispatch(lastSelectedBtnAction(type))}>{text}</button>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SelectorList;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeElement, reorderElement } from '../../../store/actionCreators';\r\n\r\nconst UpdateElementBtns = ({ id }) => {\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <>\r\n            <button className=\"delete\" onClick={() => dispatch(removeElement(id))}>x</button>\r\n            {/* <div className=\"drag\" onClick={() => dispatch(reorderElement(id))}>drag</div> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateElementBtns;","import React, { createElement, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addElement, addElementText } from '../../store/actionCreators';\r\nimport { ELEMENT_TYPES } from '../../utils/constants';\r\nimport FormatOptions from '../FormatOptions/FormatOptions';\r\nimport SelectorBtnsList from './SelectorBtnsList/SelectorBtnsList';\r\nimport UpdateBtnsList from './UpdateBtnsList/UpdateBtnsList';\r\n\r\nconst EditorInput = ({ type, canEdit, isNew, value, id, classList, getSelected, listType, listTypeInd }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [text, setText] = useState(value)\r\n    const [openFormatPP, setOpenFormatPP] = useState(false)\r\n    const lastSelectedBtn = useSelector(({ lastSelectedBtn }) => lastSelectedBtn)\r\n\r\n    const listNo = listType === ELEMENT_TYPES.OL ? listTypeInd + '. ' : listType === ELEMENT_TYPES.UL ? '* ' : ''\r\n\r\n    useEffect(() => {\r\n        setText(value)\r\n    }, [value])\r\n\r\n    return (\r\n        <div className={`editor-input ${classList.join(' ')}`}>\r\n            {!isNew && <div className=\"edit-options\"><UpdateBtnsList id={id} /></div>}\r\n            {\r\n                canEdit\r\n                    ? <div className=\"form-container\">\r\n                        {openFormatPP ? <FormatOptions id={id} optionList={classList} /> : null}\r\n                        <input className=\"editor-input-text\" type=\"text\" onChange={({ target }) => setText(target.value)} value={text}\r\n                            autoFocus\r\n                            onMouseOut={() => { }}\r\n                            onSelect={({ target }) => {\r\n                                setOpenFormatPP(!openFormatPP)\r\n                            }}\r\n                            onKeyDown={({ key }) => {\r\n                                if (key === 'Enter') {\r\n                                    dispatch(addElementText(id, { value: text, isNew: false, canEdit: false }))\r\n                                    setText('')\r\n                                    dispatch(addElement({\r\n                                        type: lastSelectedBtn === ELEMENT_TYPES.OL || lastSelectedBtn === ELEMENT_TYPES.UL ? ELEMENT_TYPES.LI : lastSelectedBtn,\r\n                                        value: '',\r\n                                        canEdit: true,\r\n                                        isNew: true,\r\n                                        listType: lastSelectedBtn === ELEMENT_TYPES.OL || lastSelectedBtn === ELEMENT_TYPES.UL ? lastSelectedBtn : null,\r\n                                        classList: []\r\n                                    }))\r\n                                }\r\n                            }} />\r\n                    </div>\r\n                    : createElement(type, {\r\n                        className: 'element',\r\n                        href: type === ELEMENT_TYPES.A ? value : '',\r\n                        target: '_blank',\r\n                        onClick: () => getSelected(id)\r\n                    }, listNo + value)\r\n            }\r\n            <div className=\"selectors\">\r\n                {isNew ? <SelectorBtnsList /> : null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditorInput;","import React, { createElement } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport DocTitle from './components/DocTitle/DocTitle';\nimport EditorInput from './components/EditorInput/EditorInput';\nimport { updateElementEdit } from './store/actionCreators';\n\nimport './App.scss';\n\nfunction App() {\n\n  const elementsList = useSelector(({ elements }) => elements)\n  const state = useSelector(state => state)\n  const docTitle = useSelector(({ title }) => title)\n  const dispatch = useDispatch()\n\n  const getSelectedElement = id => dispatch(updateElementEdit(id))\n\n  console.log(state)\n\n  const renderElements = (list) => {\n    let listCnt = 1\n    let lastListType = ''\n    const s = []\n\n    list.forEach((e, i) => {\n      const { listType } = e\n      if (listType) {\n        if (lastListType === listType) listCnt++\n        else listCnt = 1\n        lastListType = listType\n      } else {\n        if (lastListType) {\n          lastListType = ''\n          listCnt = 1\n        }\n      }\n      s.push(<EditorInput key={i} {...e} id={i} getSelected={getSelectedElement} listTypeInd={listCnt} />)\n    })\n\n    return s;\n  }\n\n  return (\n    <article className=\"App\">\n      <DocTitle />\n      {docTitle ? renderElements(elementsList) : null}\n    </article>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { ELEMENT_TYPES } from '../utils/constants';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    elements: [],\r\n    lastSelectedBtn: ELEMENT_TYPES.DEFAULT,\r\n    title: '',\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    console.log(action)\r\n    switch (action.type) {\r\n        case actionTypes.LAST_SELECTED_BTN:\r\n            return {\r\n                ...state,\r\n                lastSelectedBtn: action.data,\r\n                elements: state.elements.map(e =>\r\n                    e.isNew ? {\r\n                        ...e,\r\n                        type: action.data === ELEMENT_TYPES.OL || action.data === ELEMENT_TYPES.UL ? ELEMENT_TYPES.LI : action.data,\r\n                        listType: action.data === ELEMENT_TYPES.OL || action.data === ELEMENT_TYPES.UL ? action.data : null\r\n                    } : e\r\n                )\r\n            }\r\n        case actionTypes.UPDATE_ELEMENT_EDIT:\r\n            return {\r\n                ...state,\r\n                elements: state.elements.map((e, i) =>\r\n                    action.data === i ? { ...e, canEdit: true, isNew: false } : { ...e, canEdit: false, isNew: false }\r\n                )\r\n            }\r\n        case actionTypes.REMOVE_ELEMENT:\r\n            return { ...state, elements: state.elements.filter((e, i) => action.data !== i) }\r\n        case actionTypes.REORDER_ELEMENT:\r\n            return { ...state }\r\n        case actionTypes.ADD_ELEMENT:\r\n            return { ...state, elements: [...state.elements, action.data] }\r\n        case actionTypes.ADD_ELEMENT_TEXT:\r\n            return { ...state, elements: state.elements.map((e, i) => action.id === i ? { ...e, ...action.data } : e) }\r\n        case actionTypes.ADD_TITLE:\r\n            return { ...state, title: action.data }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const store = configureStore({\r\n    reducer\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}